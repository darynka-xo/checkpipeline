import logging
import sys
import os
import asyncio
import re
import httpx
import mimetypes
import base64
import io
from typing import List, Iterator, Callable, Dict

from pydantic import BaseModel
from openai import OpenAI
from PIL import Image
import fitz  # PyMuPDF
import docx2txt

logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
logging.getLogger().addHandler(logging.StreamHandler(stream=sys.stdout))

TRUSTED_DOMAINS = [
    "tengrinews.kz", "kursiv.media", "kapital.kz", "inbusiness.kz",
    "adilet.zan.kz", "online.zakon.kz", "legalacts.egov.kz", "egov.kz"
]

def _is_trusted(url: str) -> bool:
    return any(domain in url for domain in TRUSTED_DOMAINS)

class Pipeline:
    class Valves(BaseModel):
        MODEL_ID: str = "gpt-4.1"
        TEMPERATURE: float = 0.5
        MAX_TOKENS: int = 2000
        OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY", "")

    def __init__(self):
        self.name = "Public Consultation Comment Analyzer"
        self.valves = self.Valves()
        self.client = OpenAI(api_key=self.valves.OPENAI_API_KEY)

    async def on_startup(self):
        logging.info("Pipeline is warming up‚Ä¶")

    async def on_shutdown(self):
        logging.info("Pipeline is shutting down‚Ä¶")

    async def inlet(self, body: dict, user: dict) -> dict:
        logging.info("üì• Inlet body received")

        extracted = []
        for f in body.get("files", []):
            content_url = f["url"] + "/content"
            async with httpx.AsyncClient(timeout=30) as c:
                resp = await c.get(content_url)
                resp.raise_for_status()
                content = resp.content
            mime = f.get("mime_type") or mimetypes.guess_type(f.get("name", ""))[0]
            if mime == "application/pdf":
                doc = fitz.open(stream=content, filetype="pdf")
                extracted.append("\n".join(p.get_text() for p in doc))
            elif mime == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
                with open("_tmp.docx", "wb") as tmp:
                    tmp.write(content)
                extracted.append(docx2txt.process("_tmp.docx"))
                os.remove("_tmp.docx")
            elif mime and mime.startswith("image/"):
                b64 = base64.b64encode(content).decode()
                res = self.client.chat.completions.create(
                    model=self.valves.MODEL_ID,
                    messages=[{"role": "user", "content": [
                        {"type": "text", "text": "–†–∞—Å–ø–æ–∑–Ω–∞–π —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."},
                        {"type": "image_url", "image_url": {"url": f"data:{mime};base64,{b64}"}}
                    ]}]
                )
                extracted.append(res.choices[0].message.content.strip())
        body["file_text"] = "\n".join(extracted)
        return body

    async def trusted_web_search(self, query: str) -> str:
        try:
            response = self.client.responses.create(
                model=self.valves.MODEL_ID,
                tools=[{"type": "web_search_preview"}],
                input=f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≥—Ä–∞–∂–¥–∞–Ω –ø–æ —Ç–µ–º–µ: {query}. –û–±—Ä–∞–±–æ—Ç–∞–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞, –≤–∫–ª—é—á–∞—è tengrinews.kz, kursiv.media, kapital.kz, legalacts.egov.kz, adilet.zan.kz. –ü—Ä–∏–≤–µ–¥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏ —á—ë—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–∞."
            )
            return response.output_text
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ web search: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."

    def pipe(self, user_message: str, model_id: str, messages: List[dict], body: dict) -> Iterator[str]:
        if body.get("file_text"):
            user_message += "\n\n–¢–µ–∫—Å—Ç –∏–∑ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n" + body["file_text"]

        async def _generate() -> str:
            return await self.trusted_web_search(f"""
**–†–æ–ª—å:** –í—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø—Ä–∏ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–µ —é—Å—Ç–∏—Ü–∏–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≥—Ä–∞–∂–¥–∞–Ω –∫ –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–∞–º, –≤—ã—è–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏, –∏ –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ä–µ–¥–∞–∫—Ü–∏–∏ –∑–∞–∫–æ–Ω–∞.

---

## üî¢ **–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞):**

### **–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ**
–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø–æ–¥—Ö–æ–¥.

---

### **1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑**
- **–í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:** [—á–∏—Å–ª–æ]
- **–ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö:** [—á–∏—Å–ª–æ] ([%])
- **–ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö:** [—á–∏—Å–ª–æ] ([%])
- **–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö:** [—á–∏—Å–ª–æ] ([%])

#### **–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã:**
- ‚úî –¢–µ–º–∞ 1 (—É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ X% –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
- ‚úî –¢–µ–º–∞ 2 ...

#### **–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ–ø–∞—Å–µ–Ω–∏—è:**
- ‚ö† –¢–µ–º–∞ 1 (–≤ Y% –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
- ‚ö† –¢–µ–º–∞ 2 ...

#### **–û–±—â–∏–µ —Ç—Ä–µ–Ω–¥—ã:**
- –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ö–æ–∂–∏—Ö –æ–ø–∞—Å–µ–Ω–∏–π –ø–æ —Ç–µ–º–µ...
- –ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –ø—Ä–æ—Å—å–±–∞ –æ...

---

### **2. –ü–æ –∫–∞–∂–¥–æ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é:**

#### **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: \"[–≤—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]\"**
üîπ **–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** (–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π / –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π / –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π)  
üîπ **–ê–Ω–∞–ª–∏–∑:**  
[–ö—Ä–∞—Ç–∫–∏–π —Ä–∞–∑–±–æ—Ä —Å—É—Ç–∏, –º–æ—Ç–∏–≤–∞—Ü–∏–∏, –ª–æ–≥–∏–∫–∏, –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤]

üîπ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**  
- [–ß—ë—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: –ø–æ—è—Å–Ω–∏—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å, —É—á–µ—Å—Ç—å, –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏ –æ–±–æ—Å–Ω–æ–≤–∞—Ç—å]

---

(–ø–æ–≤—Ç–æ—Ä–∏—Ç—å –±–ª–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)

---

### **3. –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ**
- –û–±–æ–±—â–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
- –í—ã–¥–µ–ª–∏—Ç–µ, –∫–∞–∫–∏–µ –ø—Ä–∞–≤–∫–∏ —Å—Ç–æ–∏—Ç –æ–±—Å—É–¥–∏—Ç—å –∏–ª–∏ –ø—Ä–∏–Ω—è—Ç—å.
- –ï—Å–ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–Ω–µ–Ω–∏–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è, —Å–µ—Å—Å–∏—è Q&A, —Å–º—è–≥—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫).

---

### **4. –ò—Å—Ç–æ—á–Ω–∏–∫–∏**
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏—Ç–µ –°–°–´–õ–ö–ò –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.

---
## üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:

- –°—Ç–∏–ª—å: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π, —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π
- –ö–∞–∂–¥—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
- –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π—Ç–µ –º–Ω–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
- –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –º–∞–ª–æ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ
- –ù–µ –∏–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –¥–∏–Ω–∞–º–∏–∫—É

–¢–µ–º–∞: {user_message}""")

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        return loop.run_until_complete(_generate())
