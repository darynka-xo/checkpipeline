import logging
import sys
import os
import time
import asyncio
import re
import httpx
import mimetypes
import base64
from textwrap import wrap
from typing import List, Dict, Iterator

from pydantic import BaseModel
from openai import OpenAI
import fitz  # PyMuPDF ‚Äì PDF ‚Üí text
import docx2txt  # .docx ‚Üí text

# ======================================================================
# Logging
# ======================================================================
logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
logger = logging.getLogger(__name__)
logger.addHandler(logging.StreamHandler(stream=sys.stdout))

# ======================================================================
# Utilities
# ======================================================================

def clean_html(text: str) -> str:
    """Strip HTML tags & collapse whitespace."""
    text = re.sub(r"<[^>]+>", " ", text)
    text = re.sub(r"\s+", " ", text)
    return text.strip()


async def web_search(query: str) -> List[Dict[str, str]]:
    """Use OpenAI *web_search_preview* tool to fetch comment snippets."""
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    rsp = await asyncio.to_thread(
        client.responses.create,
        model="gpt-4.1",
        tools=[{"type": "web_search_preview"}],
        input=query,
    )
    return [{
        "title": "OpenAI web search preview",
        "link": "https://www.google.com/search?q=" + query.replace(" ", "+"),
        "snippet": rsp.output_text,
    }]


# ======================================================================
# Pipeline
# ======================================================================


class Pipeline:

    class Valves(BaseModel):
        MODEL_ID: str = "gpt-4o"
        TEMPERATURE: float = 0.5
        MAX_TOKENS: int = 2000
        OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY", "")

    def __init__(self):
        self.name = "Public Consultation Comment Analyzer"
        self.valves = self.Valves()
        self.client = OpenAI(api_key=self.valves.OPENAI_API_KEY)

    # -------------------- Optional lifecycle hooks --------------------
    async def on_startup(self):
        logger.info("%s pipeline warming up‚Ä¶", self.name)

    async def on_shutdown(self):
        logger.info("%s pipeline shutting down‚Ä¶", self.name)

    # --------------------------- Inlet --------------------------------
    async def inlet(self, body: dict, user: dict | None = None):
        """Extract text from uploaded PDFs, DOCX, and images (OCR)."""
        extracted: List[str] = []
        for f in body.get("files", []):
            try:
                async with httpx.AsyncClient(timeout=30) as c:
                    resp = await c.get(f["url"] + "/content")
                    resp.raise_for_status()
                    content = resp.content

                mime = f.get("mime_type") or mimetypes.guess_type(f.get("name", ""))[0]
                if mime == "application/pdf":
                    doc = fitz.open(stream=content, filetype="pdf")
                    extracted.append("\n".join(p.get_text() for p in doc))
                    doc.close()
                elif mime == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
                    tmp = "_tmp.docx"
                    with open(tmp, "wb") as fh:
                        fh.write(content)
                    extracted.append(docx2txt.process(tmp))
                    os.remove(tmp)
                elif mime and mime.startswith("image/"):
                    b64 = base64.b64encode(content).decode()
                    ocr_resp = self.client.chat.completions.create(
                        model=self.valves.MODEL_ID,
                        messages=[{
                            "role": "user",
                            "content": [
                                {"type": "text", "text": "–°–¥–µ–ª–∞–π OCR –±–µ–∑ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏."},
                                {"type": "image_url", "image_url": {"url": f"data:{mime};base64,{b64}"}},
                            ],
                        }],
                        temperature=0.0,
                        max_tokens=1024,
                    )
                    extracted.append(ocr_resp.choices[0].message.content.strip())
                else:
                    logger.warning("Unsupported MIME %s", mime)
            except Exception as exc:
                logger.warning("Failed to process %s: %s", f.get("name"), exc)

        if extracted:
            body["file_text"] = "\n\n".join(extracted)
        return body

    # --------------------------- Main ---------------------------------
    def pipe(self, user_message: str, model_id: str, messages: List[dict], body: dict | None = None) -> Iterator[str]:
        body = body or {}
        if body.get("file_text"):
            user_message += "\n\n–¢–µ–∫—Å—Ç –∏–∑ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n" + body["file_text"]

        # ---- Web search context
        try:
            search_results = asyncio.run(web_search(user_message))
        except Exception as exc:
            logger.warning("search error: %s", exc)
            search_results = []

        search_ctx = "".join(
            f"{i+1}. {r['snippet']} (–∏—Å—Ç–æ—á–Ω–∏–∫: {r['link']})\n" for i, r in enumerate(search_results)
        )
        if search_ctx:
            search_ctx = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n" + search_ctx

        # ---- Prompt
        system_msg = """
**–†–æ–ª—å:** –í—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø—Ä–∏ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–µ —é—Å—Ç–∏—Ü–∏–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≥—Ä–∞–∂–¥–∞–Ω –∫ –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–∞–º, –≤—ã—è–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏, –∏ –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ä–µ–¥–∞–∫—Ü–∏–∏ –∑–∞–∫–æ–Ω–∞.

---

## üî¢ **–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞):**

### **–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ**
–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø–æ–¥—Ö–æ–¥.

---

### **1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑**
- **–í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:** [—á–∏—Å–ª–æ]
- **–ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö:** [—á–∏—Å–ª–æ] ([%])
- **–ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö:** [—á–∏—Å–ª–æ] ([%])
- **–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö:** [—á–∏—Å–ª–æ] ([%])

#### **–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã:**
- ‚úî –¢–µ–º–∞ 1 (—É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ X% –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
- ‚úî –¢–µ–º–∞ 2 ...

#### **–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ–ø–∞—Å–µ–Ω–∏—è:**
- ‚ö† –¢–µ–º–∞ 1 (–≤ Y% –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
- ‚ö† –¢–µ–º–∞ 2 ...

#### **–û–±—â–∏–µ —Ç—Ä–µ–Ω–¥—ã:**
- –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ö–æ–∂–∏—Ö –æ–ø–∞—Å–µ–Ω–∏–π –ø–æ —Ç–µ–º–µ...
- –ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –ø—Ä–æ—Å—å–±–∞ –æ...

---

### **2. –ü–æ –∫–∞–∂–¥–æ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é:**

#### **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: "[–≤—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]"**
üîπ **–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** (–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π / –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π / –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π)  
üîπ **–ê–Ω–∞–ª–∏–∑:**  
[–ö—Ä–∞—Ç–∫–∏–π —Ä–∞–∑–±–æ—Ä —Å—É—Ç–∏, –º–æ—Ç–∏–≤–∞—Ü–∏–∏, –ª–æ–≥–∏–∫–∏, –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤]

üîπ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**  
- [–ß—ë—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: –ø–æ—è—Å–Ω–∏—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å, —É—á–µ—Å—Ç—å, –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏ –æ–±–æ—Å–Ω–æ–≤–∞—Ç—å]

---

(–ø–æ–≤—Ç–æ—Ä–∏—Ç—å –±–ª–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)

---

### **3. –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ**
- –û–±–æ–±—â–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
- –í—ã–¥–µ–ª–∏—Ç–µ, –∫–∞–∫–∏–µ –ø—Ä–∞–≤–∫–∏ —Å—Ç–æ–∏—Ç –æ–±—Å—É–¥–∏—Ç—å –∏–ª–∏ –ø—Ä–∏–Ω—è—Ç—å.
- –ï—Å–ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–Ω–µ–Ω–∏–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è, —Å–µ—Å—Å–∏—è Q&A, —Å–º—è–≥—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫).

---

## üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:

- –°—Ç–∏–ª—å: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π, —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π
- –ö–∞–∂–¥—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
- –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π—Ç–µ –º–Ω–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
- –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –º–∞–ª–æ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ
- –ù–µ –∏–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –¥–∏–Ω–∞–º–∏–∫—É
"""
        chat_messages = [
            {"role": "system", "content": system_msg},
            {"role": "assistant", "content": search_ctx},
            {"role": "user", "content": user_message},
        ]

        # ---- Single‚Äëshot completion (no OpenAI Stream ‚Üí avoids await bug)
        def generate_once() -> str:
            resp = self.client.chat.completions.create(
                model=self.valves.MODEL_ID,
                messages=chat_messages,
                temperature=self.valves.TEMPERATURE,
                max_tokens=self.valves.MAX_TOKENS,
            )
            return resp.choices[0].message.content

        try:
            full_answer = generate_once()
        except Exception as exc:
            logger.error("Completion failed: %s", exc)
            yield "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            return

        # ---- Chunk into ~800‚Äëchar pieces so OpenWebUI can stream gradually
        for piece in wrap(full_answer, 800):
            yield piece
            time.sleep(0.02)  # tiny pause for UI flushing
