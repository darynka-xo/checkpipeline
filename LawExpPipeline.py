import logging
import sys
import os
import asyncio
import re
import httpx
import mimetypes
import base64
import io
from typing import List, Iterator, Callable, Dict

from pydantic import BaseModel
from openai import OpenAI
from PIL import Image
import fitz
import docx2txt

logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
logging.getLogger().addHandler(logging.StreamHandler(stream=sys.stdout))

TRUSTED_DOMAINS = [
    "akorda.kz", "senate.parlam.kz", "primeminister.kz",
    "otyrys.prk.kz", "senate-zan.prk.kz", "lib.prk.kz",
    "online.zakon.kz", "adilet.zan.kz", "legalacts.egov.kz",
    "egov.kz", "eotinish.kz"
]

def _is_trusted(url: str) -> bool:
    return any(d in url for d in TRUSTED_DOMAINS)

def clean_html(text: str) -> str:
    text = re.sub(r"<[^>]+>", " ", text)
    text = re.sub(r"\s+", " ", text)
    return text.strip()

async def web_search(query: str) -> List[Dict[str, str]]:
    try:
        client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        response = client.responses.create(
            model="gpt-4o",
            tools=[{"type": "web_search_preview"}],
            input=query
        )
        return [{
            "title": "–ü–æ–∏—Å–∫ OpenAI",
            "link": "https://www.google.com/search?q=" + query.replace(" ", "+"),
            "snippet": response.output_text
        }]
    except Exception as e:
        logging.warning(f"OpenAI web_search_preview error: {e}")
        return []

async def open_url(url: str) -> str:
    headers = {"User-Agent": "Mozilla/5.0 (compatible; LawExpBot/1.0)"}
    try:
        async with httpx.AsyncClient(timeout=30, headers=headers) as client:
            r = await client.get(url, follow_redirects=True)
            r.raise_for_status()
            return clean_html(r.text)[:15000]
    except Exception as e:
        logging.warning(f"open_url error for {url}: {e}")
        return f"__FETCH_ERROR__: {e}"

class Pipeline:
    class Valves(BaseModel):
        MODEL_ID: str = "gpt-4o"
        TEMPERATURE: float = 0.3
        MAX_TOKENS: int = 1800
        OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY", "")

    def __init__(self):
        self.name = "–≠–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º"
        self.valves = self.Valves()
        self.client = OpenAI(api_key=self.valves.OPENAI_API_KEY)

    async def on_startup(self):
        logging.info("LawExp pipeline warming up‚Ä¶")

    async def on_shutdown(self):
        logging.info("LawExp pipeline shutting down‚Ä¶")

    async def make_request_with_retry(self, fn: Callable[[], Iterator[str]], retries=3) -> Iterator[str]:
        for attempt in range(retries):
            try:
                return fn()
            except Exception as e:
                logging.error(f"Attempt {attempt+1} failed: {e}")
                if attempt + 1 == retries:
                    raise
                await asyncio.sleep(2 ** attempt)

    async def inlet(self, body: dict, user: dict) -> dict:
        import json
        logging.info("üì• Inlet body:\n" + json.dumps(body, indent=2, ensure_ascii=False))

        extracted = []
        for f in body.get("files", []):
            content_url = f["url"] + "/content"
            async with httpx.AsyncClient(timeout=30) as c:
                resp = await c.get(content_url)
                resp.raise_for_status()
                content = resp.content
            mime = f.get("mime_type") or mimetypes.guess_type(f.get("name", ""))[0]
            if mime == "application/pdf":
                doc = fitz.open(stream=content, filetype="pdf")
                extracted.append("\n".join(p.get_text() for p in doc))
            elif mime == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
                with open("_tmp.docx", "wb") as tmp:
                    tmp.write(content)
                extracted.append(docx2txt.process("_tmp.docx"))
                os.remove("_tmp.docx")
            elif mime and mime.startswith("image/"):
                b64 = base64.b64encode(content).decode()
                res = self.client.chat.completions.create(
                    model=self.valves.MODEL_ID,
                    messages=[{"role": "user", "content": [
                        {"type": "text", "text": "–†–∞—Å–ø–æ–∑–Ω–∞–π —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."},
                        {"type": "image_url", "image_url": {"url": f"data:{mime};base64,{b64}"}}
                    ]}]
                )
                extracted.append(res.choices[0].message.content.strip())
        body["file_text"] = "\n".join(extracted)
        return body

    def pipe(self, user_message: str, model_id: str, messages: List[dict], body: dict) -> Iterator[str]:
        if body.get("file_text"):
            user_message += "\n\n–¢–µ–∫—Å—Ç –∏–∑ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n" + body["file_text"]

        system_msg = (
            "–¢—ã ‚Äî –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ –ø—Ä–∞–≤–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º, –≤–ª–∞–¥–µ—é—â–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–º –∏ —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–∞–º–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–µ–∂–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–º –∑–∞–∫–æ–Ω–æ–ø—Ä–æ–µ–∫—Ç–æ–º –∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏–º–∏ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–º–∏ –∑–∞–∫–æ–Ω–∞–º–∏.\n"
            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏:\n"
            "1. –ù–∞–π–¥–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–æ–Ω—ã, —Å—Ç–∞—Ç—å–∏ –∏–ª–∏ –ø—É–Ω–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ü–ï–†–ï–°–ï–ö–ê–Æ–¢–°–Ø –∏–ª–∏ –î–£–ë–õ–ò–†–£–Æ–¢ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –ø—Ä–æ–µ–∫—Ç.\n"
            "2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —É–∫–∞–∂–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω–∞, –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏, –∏ —Å—Ñ–æ—Ä–º–∏—Ä—É–π –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å).\n"
            "3. –ï—Å–ª–∏ –Ω–∞ adilet.zan.kz –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–∞–≤–æ–∫ —ç—Ç–æ–π –Ω–æ—Ä–º—ã ‚Äî –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ –µ—ë.\n"
            "4. –ü–æ—Å–ª–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–µ–¥—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å–ø—Ä–∞–≤–∫—É (–º–æ–∂–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown –∏–ª–∏ HTML), –≥–¥–µ —Å–¥–µ–ª–∞–π –≤—ã–≤–æ–¥—ã –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–∞—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.\n"
            "5. –£—á–∏—Ç—ã–≤–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∞—Å–ø–µ–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –Ω–æ—Ä–º—ã –∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∫–∏).\n"
            "–¢–∞–±–ª–∏—Ü–∞ —Ñ–æ—Ä–º–∞—Ç–∞: | ‚Ññ | –°—Ç–∞—Ç—å—è –ø—Ä–æ–µ–∫—Ç–∞ | –î—É–±–ª–∏—Ä—É—é—â–∞—è –Ω–æ—Ä–º–∞ | –ò—Å—Ç–æ—á–Ω–∏–∫ | –ü—Ä–∞–≤–∫–∏ | –°—Å—ã–ª–∫–∞ | –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π |\n"
            "–ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Å—Ç–∞—Ç—å–∏. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –∑–∞–∫–æ–Ω–∞–º."
        )

        async def _generate() -> str:
            try:
                messages_payload = [
                    {"role": "system", "content": system_msg},
                    {"role": "user", "content": user_message}
                ]
                response = self.client.chat.completions.create(
                    model=self.valves.MODEL_ID,
                    tools=[{"type": "web_search_preview"}],
                    messages=messages_payload
                )
                return response.choices[0].message.content
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        return loop.run_until_complete(_generate())
