import logging
import sys
import os
import asyncio
import requests
from bs4 import BeautifulSoup
from typing import List, Union, Generator, Iterator, Sequence
from pydantic import BaseModel, Field
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.tools import tool, BaseTool
from langchain.agents import create_tool_calling_agent, AgentExecutor
from langchain_core.messages import SystemMessage, HumanMessage


logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
logging.getLogger().addHandler(logging.StreamHandler(stream=sys.stdout))


class WebSearchInput(BaseModel):
    query: str = Field(description="–ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")

@tool("search_kz_web", args_schema=WebSearchInput, return_direct=False)
def search_kz_web(query: str) -> str:
    """–ü–æ–∏—Å–∫, –ø–∞—Ä—Å–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
    try:
        trusted_sites = [
            "site:adilet.zan.kz",
            "site:gov.kz",
            "site:egov.kz",
            "site:nao.kz",
            "site:nbrk.kz",
            "site:kase.kz",
            "site:primeminister.kz",
            "site:stat.gov.kz"
        ]
        query_with_sites = f"{query} " + " OR ".join(trusted_sites)
        url = f"https://www.google.com/search?q={requests.utils.quote(query_with_sites)}&hl=ru"
        headers = {"User-Agent": "Mozilla/5.0"}
        html = requests.get(url, headers=headers, timeout=10).text
        soup = BeautifulSoup(html, "html.parser")

        results = []
        for g in soup.select(".tF2Cxc")[:3]:
            title = g.select_one("h3")
            snippet = g.select_one(".VwiC3b")
            link = g.select_one("a")
            if title and snippet and link:
                full_text = extract_text_from_url(link['href'])
                summary = analyze_external_text(full_text)
                results.append(f"üîó {title.text}\n{snippet.text}\n{link['href']}\n---\n{summary}\n")

        return "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n\n" + "\n".join(results) if results else "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"


def extract_text_from_url(url: str) -> str:
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, "html.parser")
        paragraphs = soup.find_all("p")
        text = "\n".join(p.get_text(strip=True) for p in paragraphs)
        return text.strip() if text else "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ."
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}]"


def analyze_external_text(text: str) -> str:
    try:
        if not text or "–û—à–∏–±–∫–∞" in text:
            return text

        model = ChatOpenAI(
            api_key=os.getenv("OPENAI_API_KEY", ""),
            model="gpt-4o",
            temperature=0.5
        )

        messages = [
            SystemMessage(content="–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∏ –≤—ã–¥–µ–ª–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ –∏–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É."),
            HumanMessage(content=text[:4000])
        ]

        result = model.invoke(messages)
        return result.content
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}]"

class Pipeline:
    class Valves(BaseModel):
        MODEL_ID: str = "gpt-4o"
        TEMPERATURE: float = 0.7
        MAX_TOKENS: int = 1500
        OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY", "")

    def __init__(self):
        self.name = "Negotiation Strategy Predictor with search"
        self.valves = self.Valves()

    async def on_startup(self):
        logging.info("Pipeline is warming up...")

    async def on_shutdown(self):
        logging.info("Pipeline is shutting down...")

    async def make_request_with_retry(self, fn, retries=3, *args, **kwargs):
        for attempt in range(retries):
            try:
                return await fn(*args, **kwargs)
            except Exception as e:
                logging.error(f"Attempt {attempt + 1} failed: {e}")
                if attempt + 1 == retries:
                    raise
                await asyncio.sleep(2 ** attempt)

    def pipe(
        self, user_message: str, model_id: str, messages: List[dict], body: dict
    ) -> Union[str, Generator, Iterator]:

        system_message = """
**–†–æ–ª—å:** –í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é. –í–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤–µ–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π. –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å—Ç—Ä–æ–≥–æ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.

**–û–±–ª–∞—Å—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:**
–í—ã –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤, –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —É–±–µ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –í —Å–ª—É—á–∞–µ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã –º—è–≥–∫–æ —É–≤–µ–¥–æ–º–ª—è–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å.

**–ü—Ä–∏–º–µ—Ä —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å:**
> ¬´–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –º–æ—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –∞–Ω–∞–ª–∏–∑–æ–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π. –ú–æ–≥—É –ª–∏ —è –ø–æ–º–æ—á—å –≤–∞–º —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤?¬ª

**–¶–µ–ª—å:**
1. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–µ –∏–ª–∏ —Å–ª–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏.
2. –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ, –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.
3. –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏, –≤—ã–≥–æ–¥ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞.

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (gov.kz, adilet.zan.kz, egov.kz –∏ —Ç.–¥.), –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –≤–Ω–µ—à–Ω—é—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤—ã–≤–æ–¥—ã.
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:**

### 1. –í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–∞–ª–∏–∑—É–µ–º—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —É—á–∏—Ç—ã–≤–∞—é—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω.

### 2. –ü—Ä–æ–≥–Ω–æ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –û—Ü–µ–Ω–∫–∞ –∫–∞–∂–¥–æ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Ä–µ—à–µ–Ω–∏—è –ø–æ —Ç–∞–∫–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –∫–∞–∫: —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å, —Ä–∏—Å–∫–∏, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.

### 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ö–∞–∫–∞—è –º–æ–¥–µ–ª—å –Ω–∞–∏–ª—É—á—à–∏–º –æ–±—Ä–∞–∑–æ–º –ø–æ–¥–æ–π–¥–µ—Ç –≤ –¥–∞–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –ø–æ—á–µ–º—É.
- –£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
"""

        model = ChatOpenAI(
            api_key=self.valves.OPENAI_API_KEY,
            model=self.valves.MODEL_ID,
            temperature=self.valves.TEMPERATURE
        )

        tools: Sequence[BaseTool] = [search_kz_web]

        prompt = ChatPromptTemplate.from_messages([
            ("system", system_message),
            MessagesPlaceholder("chat_history"),
            ("user", "{input}"),
            MessagesPlaceholder("agent_scratchpad")
        ])

        agent = create_tool_calling_agent(model, tools, prompt)
        agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True, handle_parsing_errors=True)

        response = agent_executor.invoke({
            "input": user_message,
            "chat_history": messages
        })

        return response["output"]