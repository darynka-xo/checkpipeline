import logging
import sys
import os
import asyncio
import requests
from bs4 import BeautifulSoup
from typing import List, Iterator, Sequence, Callable
from pydantic import BaseModel, Field
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.tools import tool, BaseTool
from langchain.agents import create_tool_calling_agent, AgentExecutor
from langchain_core.messages import SystemMessage, HumanMessage

logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
logging.getLogger().addHandler(logging.StreamHandler(stream=sys.stdout))


class WebSearchInput(BaseModel):
    query: str = Field(description="–ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")


@tool("search_kz_web", args_schema=WebSearchInput, return_direct=False)
def search_kz_web(query: str) -> str:
    """–ü–æ–∏—Å–∫, –ø–∞—Ä—Å–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
    try:
        trusted_sites = [
            "site:senate.parlam.kz", "site:akorda.kz", "site:primeminister.kz",
            "site:otyrys.prk.kz", "site:senate-zan.prk.kz",
            "site:lib.prk.kz", "site:online.zakon.kz", "site:adilet.zan.kz",
            "site:legalacts.egov.kz", "site:egov.kz", "site:eotinish.kz"
        ]
        query_with_sites = f"{query} " + " OR ".join(trusted_sites)
        url = f"https://www.google.com/search?q={requests.utils.quote(query_with_sites)}&hl=ru"
        headers = {"User-Agent": "Mozilla/5.0"}
        html = requests.get(url, headers=headers, timeout=10).text
        soup = BeautifulSoup(html, "html.parser")

        sources = []
        for g in soup.select(".tF2Cxc")[:3]:
            title = g.select_one("h3")
            link = g.select_one("a")
            if title and link:
                page_url = link["href"]
                page_text = extract_text_from_url(page_url)
                sources.append({
                    "title": title.text,
                    "url": page_url,
                    "text": page_text
                })

        if not sources:
            return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

        summary = analyze_multiple_sources(sources)
        return "üìä –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n\n" + summary
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"



def extract_text_from_url(url: str) -> str:
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, "html.parser")
        paragraphs = soup.find_all("p")
        text = "\n".join(p.get_text(strip=True) for p in paragraphs)
        return text.strip() if text else "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ."
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}]"


def analyze_external_text(text: str, source_url: str) -> str:
    try:
        if not text or "–û—à–∏–±–∫–∞" in text or len(text.strip()) < 50:
            return f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\nüìé –ò—Å—Ç–æ—á–Ω–∏–∫: {source_url}"

        model = ChatOpenAI(
            api_key=os.getenv("OPENAI_API_KEY", ""),
            model="gpt-4o",
            temperature=0.5
        )

        messages = [
            SystemMessage(content=f"""–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ. 
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∏ —Å–¥–µ–ª–∞–π—Ç–µ 2‚Äì3 –∫–ª—é—á–µ–≤—ã—Ö –≤—ã–≤–æ–¥–∞.
**–ö–∞–∂–¥—ã–π –≤—ã–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å—Å—è –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º.**
**–í –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫: {source_url}**. –ë–µ–∑ —ç—Ç–æ–≥–æ ‚Äî –æ—Ç–≤–µ—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ–ø–æ–ª–Ω—ã–º."""),
            HumanMessage(content=text[:4000])
        ]

        result = model.invoke(messages)
        content = result.content.strip()

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –µ—Å–ª–∏ GPT –Ω–µ –≤—Å—Ç–∞–≤–∏–ª –µ–≥–æ —Å–∞–º
        if "–ò—Å—Ç–æ—á–Ω–∏–∫" not in content and source_url not in content:
            content += f"\n\nüìé –ò—Å—Ç–æ—á–Ω–∏–∫: {source_url}"

        return content

    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}]\nüìé –ò—Å—Ç–æ—á–Ω–∏–∫: {source_url}"



def analyze_multiple_sources(sources: List[dict]) -> str:
    try:
        model = ChatOpenAI(
            api_key=os.getenv("OPENAI_API_KEY", ""),
            model="gpt-4o",
            temperature=0.5
        )

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º 2‚Äì3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
        combined_chunks = []
        for src in sources[:3]:
            clean_text = src['text'][:1000].strip()
            if clean_text:
                combined_chunks.append(f"[–ò—Å—Ç–æ—á–Ω–∏–∫: {src['url']}]\n{clean_text}")

        combined_text = "\n\n".join(combined_chunks)

        messages = [
            SystemMessage(content="""
–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é.
–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—ã–¥–µ—Ä–∂–∫–∏ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
–ù–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ —Å–¥–µ–ª–∞–π—Ç–µ 2‚Äì3 –∫–ª—é—á–µ–≤—ã—Ö –≤—ã–≤–æ–¥–∞, –∫–∞–∂–¥—ã–π —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º. 
üìé –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Å—ã–ª–∞–π—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–ò—Å—Ç–æ—á–Ω–∏–∫: URL] –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤—ã–≤–æ–¥–∞.
"""),
            HumanMessage(content=combined_text)
        ]

        result = model.invoke(messages)
        return result.content
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}]"


class Pipeline:
    class Valves(BaseModel):
        MODEL_ID: str = "gpt-4o"
        TEMPERATURE: float = 0.7
        MAX_TOKENS: int = 1500
        OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY", "")

    def __init__(self):
        self.name = "Negotiation Strategy Predictor with Search"
        self.valves = self.Valves()

    async def on_startup(self):
        logging.info("Pipeline is warming up...")

    async def on_shutdown(self):
        logging.info("Pipeline is shutting down...")

    async def make_request_with_retry(self, fn: Callable[[], Iterator[str]], retries=3) -> Iterator[str]:
        for attempt in range(retries):
            try:
                return fn()
            except Exception as e:
                logging.error(f"Attempt {attempt + 1} failed: {e}")
                if attempt + 1 == retries:
                    raise
                await asyncio.sleep(2 ** attempt)

    def pipe(
    self, user_message: str, model_id: str, messages: List[dict], body: dict
) -> Iterator[str]:

        system_message = """
    **–†–æ–ª—å:** –í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é. –í–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤–µ–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π. –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å—Ç—Ä–æ–≥–æ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
    
    **–û–±–ª–∞—Å—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:** –í—ã –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤, –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —É–±–µ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –í —Å–ª—É—á–∞–µ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã –º—è–≥–∫–æ —É–≤–µ–¥–æ–º–ª—è–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å.
    
    **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
    
    * –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç `search_kz_web` –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º. –ë–µ–∑ –Ω–µ–≥–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥—ã.
    * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏–º—É–º 2‚Äì3 –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (gov.kz, adilet.zan.kz, egov.kz –∏ —Ç.–¥.).
    * –î–µ–ª–∞–π—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–∞–π—Ç–æ–≤.
    
    **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:**
    
    ### 1. –í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
    
    ### 2. –ü—Ä–æ–≥–Ω–æ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    
    ### 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    """
    
        model = ChatOpenAI(
            api_key=self.valves.OPENAI_API_KEY,
            model=self.valves.MODEL_ID,
            temperature=self.valves.TEMPERATURE,
            streaming=True
        )
    
        tools: Sequence[BaseTool] = [search_kz_web]
    
        # üëâ –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–æ –∞–≥–µ–Ω—Ç–∞
        search_result = search_kz_web.run({"query": user_message})
        if search_result:
            messages.append({"role": "assistant", "content": search_result})
    
        prompt = ChatPromptTemplate.from_messages([
            ("system", system_message),
            MessagesPlaceholder("chat_history"),
            ("user", "{input}"),
            MessagesPlaceholder("agent_scratchpad")
        ])
    
        agent = create_tool_calling_agent(model, tools, prompt)
        agent_executor = AgentExecutor(
            agent=agent,
            tools=tools,
            verbose=True,
            handle_parsing_errors=True,
            streaming=True
        )
    
        def stream_agent() -> Iterator[str]:
            collected_output = ""
        
            for chunk in agent_executor.stream({
                "input": user_message,
                "chat_history": messages
            }):
                print("DEBUG CHUNK:", chunk)  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
                output = None
                if "output" in chunk:
                    output = chunk["output"]
                elif "final_output" in chunk:
                    output = chunk["final_output"]
        
                if output:
                    logging.debug(f"Agent chunk: {output}")
                    collected_output += output
                    yield output
        
            # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫
            if "–ò—Å—Ç–æ—á–Ω–∏–∫:" not in collected_output and "üìé" not in collected_output:
                yield "\n\nüìé –î–æ–±–∞–≤–ª–µ–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ —Ç–µ–º–µ:\n"
                try:
                    search_result = search_kz_web.run({"query": user_message})
                    yield f"\n\nüìé –¢–æ–ø 2‚Äì3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ —Ç–µ–º–µ:\n{search_result}"
                except Exception as e:
                    yield f"\n[–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫: {e}]"



